services:


  php80:
    image: ${DOCKER_REGISTRY}/php:80
    container_name: php80
    restart: always
    depends_on:
      - mysql57
      - redis
      - memcached
    links:
      - mysql57:mysql57
      - redis:redis
      - memcached:memcached
    ports:
      - "29000:9000"
    volumes:
      - ./runtime/logs/php80/:/var/log/php-fpm
    networks:
      - dockenv
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  php81:
    image: ${DOCKER_REGISTRY}/php:81
    container_name: php81
    restart: always
    depends_on:
      - mysql57
    ports:
      - "39000:9000"
    volumes:
      - ./runtime/logs/php81/:/var/log/php-fpm/
    networks:
      - dockenv
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  postgres15:
    image: ${DOCKER_REGISTRY}/postgres:15
    hostname: postgres15
    container_name: postgres15
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres15:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=default
      - POSTGRES_USER=dockenv
      - POSTGRES_PASSWORD=dockenv



  mariadb:
    image: ${DOCKER_REGISTRY}/mariadb:latest
    hostname: mariadb
    container_name: mariadb
    restart: always
    expose:
      - "3306"
    ports:
      - "${MARIADB_PORT}:3306"
    volumes:
      - mariadb:/var/lib/mysql
      - ./runtime/logs/mariadb/:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MARIADB}

  minio:
    image: ${DOCKER_REGISTRY}/minio:latest
    hostname: minio
    environment:
      - MINIO_ADDRESS=0.0.0.0:9001 # minio port
      - MINIO_CONSOLE_ADDRESS=0.0.0.0:9002 # minio console port
    container_name: minio
    command: server /data --ftp="address=:8021" --ftp="passive-port-range=30000-40000" --sftp="address=:8022" --sftp="ssh-private-key=${HOME}/.ssh/id_rsa"
    ports:
      - 9001:9000
      - 9002:9002
      - 8021:8021
      - 8022:8022
    networks:
      - dockenv

  elastic:
    image: ${DOCKER_REGISTRY}/elastic:latest
    hostname: elastic
    container_name: elastic
    restart: always
    environment:
      - ELASTIC_PASSWORD=dockenv
      # - ENROLLMENT_TOKEN=dockenv
      - cluster.name=${NAME}
      - discovery.type=single-node
      # 默认禁用 elasticsearch https 和登陆账号密码 仅适用于 Docker 测试环境
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      # - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      # - script.painless.regex.enabled=true
      # - node.master=false
      # - node.data=true
      - TZ=${TIMEZONE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elastic:/usr/share/elasticsearch/data
      # - ${ELASTICSEARCH_CONF_FILE}:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      dockenv:
        ipv4_address: ${IP_ELASTICSEARCH}

  kibana:
    image: ${DOCKER_REGISTRY}/kibana:latest
    hostname: kibana
    container_name: kibana
    restart: always
    environment:
      - TZ=${TIMEZONE}
      - SERVER_NAME=kibana
      # - ELASTICSEARCH_HOSTS=["http://${ELASTICSEARCH_IP}:9200"]
      - ELASTICSEARCH_HOSTS=["https://elastic:9200"]
    ports:
      - "${KIBANA_PORT}:5601"
    depends_on:
      - elastic
    links:
      - elastic:elastic
    networks:
      dockenv:
        ipv4_address: ${IP_KIBANA}

  logstash:
    image: ${DOCKER_REGISTRY}/logstash:latest
    hostname: logstash
    container_name: logstash
    restart: always
    environment:
      - TZ=${TIMEZONE}
    ports:
      - "9600:9600"
      - "5044:5044"
    depends_on:
      - elastic
    links:
      - elastic:elastic
    networks:
      dockenv:
        ipv4_address: ${IP_LOGSTASH}

  mongo:
    image: ${DOCKER_REGISTRY}/mongo:latest
    ports:
      - ${MONGO_PORT}:27017
    restart: always
    volumes:
      - mongo:/data/db
      - ./runtime/conf/mongo:/data/configdb
      - ./runtime/logs/mongo:/var/log/mongo
    environment:
      TZ: ${TIMEZONE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    # command: mongod --config /etc/mongod.conf
    networks:
      - dockenv



  gitea:
    image: ${DOCKER_REGISTRY}/gitea:latest
    hostname: gitea
    container_name: gitea
    restart: always
    environment:
      - USER_UID=1000
      - USER_GID=1000
      # - GITEA_CUSTOM=/etc/gitea
    ports:
      - "${GITEA_WEB_PORT}:3000"
      - "${GITEA_SSH_PORT}:22"
    depends_on:
      - mysql80
    links:
      - mysql80:mysql80
    volumes:
      - gitea:/data
      # - ./runtime/conf/gitea:/etc/gitea
    networks:
      dockenv:
        ipv4_address: ${IP_GITEA}

  # default password ,default user: root
  # grep 'Password:' /etc/gitlab/initial_root_password
  # gitlab:
  #   # image: ${DOCKER_REGISTRY}/gitea:latest
  #   image: registry.gitlab.cn/omnibus/gitlab-jh:latest
  #   hostname: gitlab
  #   container_name: gitlab
  #   restart: always
  #   shm_size: 256mb
  #   environment:
  #     - GITLAB_ROOT_PASSWORD=dockenv@gitlab
  #   ports:
  #     - "2022:22"
  #     - "2080:80"
  #     - "2443:443"
  #   volumes:
  #     # - gitlabconf:/etc/gitlab
  #     - ./runtime/conf/gitlab:/etc/gitlab
  #     # - gitlablogs:/var/log/gitlab
  #     - ./runtime/logs/gitlab:/var/log/gitlab
  #     - gitlabdata:/var/opt/gitlab
  #   networks:
  #     dockenv:

  # portainer:
  #   image: ${DOCKER_REGISTRY}/portainer:latest
  #   hostname: portainer
  #   container_name: portainer
  #   restart: always
  #   ports:
  #     - "9000:9000"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:cached
  #     - ./runtime/data/portainer/:/data:cached
  #   networks:
  #     boxs:

volumes:
  redis:
  mongo:
  mongo-conf:
  mariadb:
  mysql57:
  mysql80:
  postgres15:
  elastic:
  gitea:


