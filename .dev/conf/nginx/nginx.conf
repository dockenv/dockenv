user nginx;
# daemon off;
# 一般设置为 cpu * 2
# Set number of worker processes automatically based on number of CPU cores.

# Sets the worker threads to the number of CPU cores available in the system for
# best performance. Should be > the number of CPU cores.
# Maximum number of connections = worker_processes * worker_connections
# Default: 1
# https://nginx.org/en/docs/ngx_core_module.html#worker_processes
worker_processes auto;
worker_cpu_affinity auto;
# worker_cpu_affinity 01 10 01 10;

# The file storing the process ID of the main process
# Default: logs/nginx.pid
# https://nginx.org/en/docs/ngx_core_module.html#pid
# pid /run/nginx/nginx.pid;

# Maximum number of open files per worker process.
# Should be > worker_connections.
# Default: no limit
# https://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile
worker_rlimit_nofile 51200;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;
# include /etc/nginx/modules-enabled/*.conf;

events {
    use epoll;
    multi_accept on;
    # The maximum number of simultaneous connections that can be opened by a worker process.

    # If you need more connections than this, you start optimizing your OS.
    # That's probably the point at which you hire people who are smarter than you
    # as this is *a lot* of requests.
    # Should be < worker_rlimit_nofile.
    # Default: 512
    # https://nginx.org/en/docs/ngx_core_module.html#worker_connections
    worker_connections 51200;
}

stream {
    # Specifies the main log format.
    # https://nginx.org/en/docs/varindex.html
    log_format main '$remote_addr [$time_local]'
    '$protocol $status $bytes_sent $bytes_received '
    '$session_time "$upstream_addr" '
    '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log /var/log/nginx/stream.log main buffer=1k flush=5s;
    error_log /var/log/nginx/stream.err.log debug;

    # Includes servers configs.
    include /etc/nginx/stream.d/*.conf;
}

http {
    charset utf-8;

    add_header Server "Dockenv/0.0.1";
    add_header X-Power-By-Server "Dockenv/0.0.1";
    add_header X-Powered-By "Dockenv/0.0.1";
    add_header X-Server "Dockenv/0.0.1";

    # Includes mapping of file name extensions to MIME types of responses and defines the default type.
    include /etc/nginx/mime.types;

    # Specifies the main log format.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    proxy_temp_path /tmp/nginx/proxy_temp_dir;
    proxy_cache_path /tmp/nginx/proxy_cache_nginx levels=1:2 keys_zone=nginx:512m inactive=1d max_size=5g;
    # proxy_cache_path /tmp/nginx/proxy_cache_fastcgi levels=1:2 keys_zone=fastcgi:512m inactive=1d max_size=5g;
    proxy_max_temp_file_size 2048m;

    proxy_connect_timeout 60s;
    proxy_read_timeout 60s;
    proxy_send_timeout 60s;

    proxy_http_version 1.1;

    # Proxy caching
    proxy_cache_bypass $http_upgrade;

    proxy_buffering on;
    proxy_buffer_size 64k;
    proxy_buffers 4 64k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;
    proxy_next_upstream error timeout invalid_header http_500 http_503 http_404;
    proxy_cache nginx;

    # Name servers used to resolve names of upstream servers into addresses.
    # It's also needed when using tcp socket and udp socket in Lua modules.
    # resolver 208.67.222.222 208.67.220.220;
    # resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001;

    default_type application/octet-stream;

    port_in_redirect off;
    output_buffers 4 32k;
    expires 0;
    connection_pool_size 256;
    reset_timedout_connection on;
    request_pool_size 32k;

    variables_hash_max_size 4096;

    variables_hash_bucket_size 2048;

    server_name_in_redirect off;
    server_names_hash_max_size 2048;
    server_names_hash_bucket_size 512;
    # 使用此指令指定用于读取大型客户端请求标头的缓冲区的最大数量和大小.
    # 指令large_client_header_buffers 2 1k将缓冲区的最大数量设置为 2，每个缓冲区的最大大小为 1k。该指令将接受 2 kB 数据 URI。
    large_client_header_buffers 4 32k;

    # Specifies the maximum accepted body size of a client request, as
    # indicated by the request header Content-Length. If the stated content
    # length is greater than this size, then the client receives the HTTP
    # error code 413. Set to 0 to disable.
    # 使用此指令指定客户端请求的最大可接受正文大小。1k 指令应该足够了，但如果您通过 POST 方法接收文件上传，则需要增加它。
    client_max_body_size 512m;
    # 此指令指定客户端请求标头的标头缓冲区大小。1k 的缓冲区大小足以满足大多数请求。
    client_header_buffer_size 32k;
    client_body_timeout 10;
    # 使用此指令指定客户端请求正文缓冲区大小。默认值为 8k 或 16k，但建议将其设置为低至 1k
    client_body_buffer_size 32k;
    client_header_timeout 10;

    # Sendfile copies data between one FD and other from within the kernel,
    # which is more efficient than read() + write().
    sendfile on;
    send_timeout 5;
    types_hash_max_size 2048;

    # Causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. Default is 'off'.
    tcp_nopush on;

    # Timeout for keep-alive connections. Server will close connections after this time.
    # Use a higher keepalive timeout to reduce the need for repeated handshakes
    # up from 75 secs default

    # How long to allow each connection to stay idle.
    # Longer values are better for each individual client, particularly for SSL,
    # but means that worker connections are tied up longer.
    # Default: 75s
    # https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout
    keepalive_timeout 20s;

    # Don't buffer data-sends (disable Nagle algorithm).
    # Good for sending frequent small bursts of data in real time.
    tcp_nodelay on;

    include /etc/nginx/components/fastcgi.conf;
    include /etc/nginx/components/gzip.conf;
    # include /etc/nginx/components/brotli.conf;

    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

    # Don't tell nginx version to clients. Default is 'on'.
    server_tokens off;
    more_clear_headers 'Server: Nginx Running On Dockenv';

    # Disabled for issue https://github.com/laradock/laradock/issues/619
    # open_file_cache off;
    open_file_cache max=10000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # 'Accept: "$http_accept" ' 'Authorization: "$http_authorization" ';

    # Helper variable for proxying websockets.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Sets the path, format, and configuration for a buffered log write.
    # access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/access.log combined;

    # Configures default error logger.
    # options debug error warn crit (error) main access (access_log) or output to /dev/stderr /dev/stdout
    # warn crit
    error_log /var/log/nginx/error.log debug;

    # Includes virtual hosts configs.
    include /etc/nginx/conf.d/*.conf;
}

# TIP: Uncomment if you use stream module.
#include /etc/nginx/stream.conf;
