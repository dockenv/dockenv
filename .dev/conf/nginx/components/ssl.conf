# SSL Settings

http2 on;
http3 on;
http3_hq on;
quic_gso on;
quic_retry on;
# Enable QUIC, HTTP/3 and HTTP/2 on both IPv4 and IPv6.
listen 443 ssl;
listen [::]:443 ssl;

# listen 443 ssl http3 reuseport;
# listen [::]:443 ssl http3 reuseport;

listen 443 quic;
listen [::]:443 quic;

# redirect http to https
# if ($server_port !~ 443){
#     rewrite ^(/.*)$ https://$host$1 permanent;
# }

# 使用 301 强制 HTTPS
if ($scheme != "https") {
    return 301 https://$host$request_uri;
}

# This default SSL certificate will be served whenever the client lacks support
# for SNI (Server Name Indication).
#
# (1) Certificate and key files location
#     The certificate file can contain an intermediate certificate.
#
#     https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_certificate
#
# (2) Intermediate certificate location if loaded certificate (1) does not
#     contain intermediate certificate when enabling OCSP stapling.
#
#     https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_trusted_certificate
#
# (3) CA certificate file location for client certificate authentication.
#
#     https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_client_certificate
ssl_certificate      /data/ssl/default.cer;
ssl_certificate_key  /data/ssl/default.key;
# ssl_trusted_certificate /path/to/ca.crt;
# ssl_client_certificate /etc/nginx/default_ssl.crt;

# Dropping SSLv3, ref: POODLE
# Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
# TIP: If you're not obligated to support ancient clients, remove TLSv1 TLSv1.1 (not longer safe).
# Enable TLS versions (TLSv1.3 is required for QUIC).
ssl_protocols TLSv1.2 TLSv1.3 SSLv2 SSLv3;

# Ciphers set to best allow protection from Beast, while providing forwarding secrecy
# as defined by Mozilla (Intermediate Set) - https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx
# Specifies that our cipher suits should be preferred over client ciphers.
# AES:AES128-GCM-SHA256:AES128-SHA:AES128-SHA256:AES256-GCM-SHA384:AES256-SHA:AES256-SHA256:ALL:!aNULL:DES-CBC3-SHA:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA256:!DSS:ECDH:ECDHE:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:EECDH+3DES:EECDH+AES128:EECDH+AES256:EECDH+CHACHA20:EECDH+CHACHA20-draft:+EXP:!EXPORT56:+HIGH:HIGH:+LOW:!MD5:!MD5!ADH:+MEDIUM:!NULL:!RC4:RC4+RSA:RSA+3DES:RSA+AES128:RSA+AES256:+SSLv2:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS1ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS-AES-128-GCM-SHA256:TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256
# 配置ssl加密算法，多个算法用:分隔，ALL表示全部算法，!表示不启用该算法，+表示将该算法排到最后面
ssl_ciphers "AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:EECDH:CHACHA20:EECDH:AES256-GCM-SHA384:!MD5";
# 由服务器协商最佳的加密算法
# 如果不指定默认为off，当为on时，在使用SSLv3和TLS协议时，服务器加密算法将优于客户端加密算法
ssl_prefer_server_ciphers on;

# Enables a shared SSL cache with size that can hold around 8000 sessions.
# 1mb cache can hold about 4000 sessions
# Session Cache，将Session缓存到服务器，这可能会占用更多的服务器资源
# ssl_session_cache builtin:1000 shared:SSL:10m;
# Network Security Services (NSS)
# ssl_session_cache shared:MozSSL:10m;
# OpenSSL
ssl_session_cache shared:SSL:15m;

# For services that need to support a wide range of clients, this configuration
# is reasonably balanced.
#
# (1) The NIST curves (prime256v1, secp384r1, secp521r1) are known to be weak
#     and potentially vulnerable but are required to support Microsoft Edge
#     and Safari.
#     https://safecurves.cr.yp.to/
#
# https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations
# https://nginx.org/en/docs/http/ngx_http_ssl_module.html
# ssl_ecdh_curve X25519:prime256v1:secp521r1:secp384r1;

# OCSP is a lightweight, only one record to help clients verify the validity of
# the server certificate.
# OCSP stapling allows the server to send its cached OCSP record during the TLS
# handshake, without the need of 3rd party OCSP responder.
#
# https://wiki.mozilla.org/Security/Server_Side_TLS#OCSP_Stapling
# https://tools.ietf.org/html/rfc6066#section-8
# https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_stapling
#
# (1) Use Cloudflare 1.1.1.1 DNS resolver
#     https://developers.cloudflare.com/1.1.1.1/setting-up-1.1.1.1/
#
# (2) Use Google 8.8.8.8 DNS resolver
#     https://developers.google.com/speed/public-dns/docs/using
#
# (3) Use OpenDNS resolver
#     https://use.opendns.com
#Faster resolving, improves stapling time. Timeout and nameservers may need to be adjusted for your location Google's have been used here.
# resolver 8.8.8.8 8.8.4.4valid=300s;
# resolver 8.8.8.8 8.8.4.4 [2001:4860:4860::8888] [2001:4860:4860::8844] valid=300s;
# resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=300s;
# resolver 208.67.222.222 208.67.220.220 [2620:119:35::35] [2620:119:53::53] valid=300s;
# resolver_timeout 2s;

# Force client-side TLS (Transport Layer Security) redirection.
#
# If a user types `example.com` in their browser, even if the server redirects
# them to the secure version of the website, that still leaves a window of
# opportunity (the initial HTTP connection) for an attacker to downgrade or
# redirect the request.
#
# The following header ensures that a browser only connects to your server
# via HTTPS, regardless of what the users type in the browser's address bar.
#
# (!) Be aware that Strict Transport Security is not revokable and you
#     must ensure being able to serve the site over HTTPS for the duration
#     you've specified in the `max-age` directive. When you don't have a
#     valid TLS connection anymore (e.g. due to an expired TLS certificate)
#     your visitors will see a nasty error message even when attempting to
#     connect over HTTP.
#
# (1) Preloading Strict Transport Security.
#     To submit your site for HSTS preloading, it is required that:
#     * the `includeSubDomains` directive is specified
#     * the `preload` directive is specified
#     * the `max-age` is specified with a value of at least 31536000 seconds
#       (1 year).
#     https://hstspreload.org/#deployment-recommendations
#
# https://tools.ietf.org/html/rfc6797#section-6.1
# https://owasp.org/www-project-secure-headers/#http-strict-transport-security
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
# https://www.html5rocks.com/en/tutorials/security/transport-layer-security/
# https://hstspreload.org/
# HSTS (HTTP Strict Transport Security)
# Add HSTS header
# This header tells browsers to cache the certificate for a year and to connect exclusively via HTTPS.
add_header Strict-Transport-Security "max-age=31536000;";
# add_header Strict-Transport-Security "max-age=31536000; preload";

# Add Alt-Svc header to negotiate HTTP/3.
add_header alt-svc 'h3=":443"; ma=86400';

# Enable your site for HSTS preload inclusion.
# add_header Strict-Transport-Security "max-age=31536000; preload" always;

# This version tells browsers to treat all subdomains the same as this site and to load exclusively over HTTPS
# add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";



# Diffie-Hellman 公共密钥过弱 有以下两种生成方式 有以下两种生成方式
# Run following command & set permission before configuring
# curl https://ssl-config.mozilla.org/ffdhe2048.txt > /etc/nginx/dhparam.pem
# Path of the file with Diffie-Hellman parameters for EDH ciphers.
# TIP: Generate with: `openssl dhparam -out /etc/nginx/dh2048.pem 2048`
# 4096 is better but for overhead reasons 2048 is enough for Plex.
ssl_dhparam /etc/nginx/dh2048.pem;

# For services that don't need backward compatibility, the parameters below
# provide the highest level of security and performance.
#
# (!) This policy enforces a strong TLS configuration, which may raise
#     errors with old clients.
#     If a more compatible profile is required, use the "balanced" policy.
#
# (!) TLSv1.3 and its 0-RTT feature require NGINX >=1.15.4 and OpenSSL >=1.1.1
#     to be installed.
#
# (!) Don't enable `ssl_early_data` blindly! Requests sent within early data are
#     subject to replay attacks.
#
# (1) The NIST curves (prime256v1, secp384r1, secp521r1) are known to be weak
#     and potentially vulnerable.
#
#     Add them back to the parameter `ssl_ecdh_curve` below to support
#     Microsoft Edge and Safari.
#
#     https://safecurves.cr.yp.to/
#
# (2) Enables TLS 1.3 0-RTT, allows for faster resumption of TLS sessions.
#
# (!) Requests sent within early data are subject to replay attacks.
#     To protect against such attacks at the application layer, the
#     `$ssl_early_data` variable should be used:
#
#         proxy_set_header Early-Data $ssl_early_data;
#
#     The application should return response code 425 "Too Early" for anything
#     that could contain user supplied data.
#
#     https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/425
#
# https://github.com/certbot/certbot/issues/6367
# https://github.com/mozilla/server-side-tls/issues/217
# https://nginx.org/en/docs/http/ngx_http_ssl_module.html
# Enables TLS 1.3 0-RTT, allows for faster resumption of TLS sessions.
ssl_early_data on;

# Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
# The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
# By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
# Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
# Specifies a time during which a client may reuse the session parameters.
# Default is '5m'.
ssl_session_timeout 15m;

# Session tickets appeared in version 1.5.9
#
# nginx does not auto-rotate session ticket keys: only a HUP / restart will do so and
# when a restart is performed the previous key is lost, which resets all previous
# sessions. The fix for this is to setup a manual rotation mechanism:
# http://trac.nginx.org/nginx/changeset/1356a3b9692441e163b4e78be4e9f5a46c7479e9/nginx
# Disable TLS session tickets (they are insecure). Default is 'on'.
ssl_session_tickets off;

# SSL buffer size was added in 1.5.9
# 1400 bytes to fit in one MTU
ssl_buffer_size 1400;

# OCSP Stapling开启,OCSP是用于在线查询证书吊销情况的服务，使用OCSP Stapling能将证书有效状态的信息缓存到服务器，提高TLS握手速度
ssl_stapling on;
# OCSP Stapling 验证开启
ssl_stapling_verify on;