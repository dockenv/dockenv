# SSL Settings
# Dropping SSLv3, ref: POODLE
# Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
# TIP: If you're not obligated to support ancient clients, remove TLSv1.1.
# Enable TLS versions (TLSv1.3 is required for QUIC).
ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3 SSLv2 SSLv3;

# Diffie-Hellman 公共密钥过弱 有以下两种生成方式 有以下两种生成方式
# Run following command & set permission before configuring
# curl https://ssl-config.mozilla.org/ffdhe2048.txt > /etc/nginx/dhparam.pem
# Path of the file with Diffie-Hellman parameters for EDH ciphers.
# TIP: Generate with: `openssl dhparam -out /etc/nginx/dh2048.pem 2048`
# 4096 is better but for overhead reasons 2048 is enough for Plex.
ssl_dhparam /etc/nginx/dh2048.pem;

# Specifies that our cipher suits should be preferred over client ciphers.
# 由服务器协商最佳的加密算法
ssl_prefer_server_ciphers on;

# For services that don't need backward compatibility, the parameters below
# provide the highest level of security and performance.
#
# (!) This policy enforces a strong TLS configuration, which may raise
#     errors with old clients.
#     If a more compatible profile is required, use the "balanced" policy.
#
# (!) TLSv1.3 and its 0-RTT feature require NGINX >=1.15.4 and OpenSSL >=1.1.1
#     to be installed.
#
# (!) Don't enable `ssl_early_data` blindly! Requests sent within early data are
#     subject to replay attacks.
#
# (1) The NIST curves (prime256v1, secp384r1, secp521r1) are known to be weak
#     and potentially vulnerable.
#
#     Add them back to the parameter `ssl_ecdh_curve` below to support
#     Microsoft Edge and Safari.
#
#     https://safecurves.cr.yp.to/
#
# (2) Enables TLS 1.3 0-RTT, allows for faster resumption of TLS sessions.
#
# (!) Requests sent within early data are subject to replay attacks.
#     To protect against such attacks at the application layer, the
#     `$ssl_early_data` variable should be used:
#
#         proxy_set_header Early-Data $ssl_early_data;
#
#     The application should return response code 425 "Too Early" for anything
#     that could contain user supplied data.
#
#     https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/425
#
# https://github.com/certbot/certbot/issues/6367
# https://github.com/mozilla/server-side-tls/issues/217
# https://nginx.org/en/docs/http/ngx_http_ssl_module.html
# Enables TLS 1.3 0-RTT, allows for faster resumption of TLS sessions.
# ssl_early_data on;

# Enables a shared SSL cache with size that can hold around 8000 sessions.
# 1mb cache can hold about 4000 sessions
# Session Cache，将Session缓存到服务器，这可能会占用更多的服务器资源
# ssl_session_cache builtin:1000 shared:SSL:10m;
ssl_session_cache shared:SSL:10m;

# Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
# The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
# By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
# Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
# Specifies a time during which a client may reuse the session parameters.
# Default is '5m'.
ssl_session_timeout 12h;

# Session tickets appeared in version 1.5.9
#
# nginx does not auto-rotate session ticket keys: only a HUP / restart will do so and
# when a restart is performed the previous key is lost, which resets all previous
# sessions. The fix for this is to setup a manual rotation mechanism:
# http://trac.nginx.org/nginx/changeset/1356a3b9692441e163b4e78be4e9f5a46c7479e9/nginx
# Disable TLS session tickets (they are insecure). Default is 'on'.
ssl_session_tickets off;

# SSL buffer size was added in 1.5.9
# 1400 bytes to fit in one MTU
ssl_buffer_size 1400;

# Ciphers set to best allow protection from Beast, while providing forwarding secrecy
# as defined by Mozilla (Intermediate Set) - https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx
ssl_ciphers "!DSS:!EXPORT56:!MD5:!MD5!ADH:!NULL:!RC4:!aNULL:+EXP:+HIGH:+LOW:+MEDIUM:+SSLv2:AES:AES128-GCM-SHA256:AES128-SHA:AES128-SHA256:AES256-GCM-SHA384:AES256-SHA:AES256-SHA256:ALL:DES-CBC3-SHA:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA256:ECDH:ECDHE:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:EECDH+3DES:EECDH+AES128:EECDH+AES256:EECDH+CHACHA20:EECDH+CHACHA20-draft:HIGH:RC4+RSA:RSA+3DES:RSA+AES128:RSA+AES256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS1ssl_ciphers TLS13-AES-256-GCM-SHA384";

# OCSP Stapling开启,OCSP是用于在线查询证书吊销情况的服务，使用OCSP Stapling能将证书有效状态的信息缓存到服务器，提高TLS握手速度
ssl_stapling on;
# OCSP Stapling 验证开启
ssl_stapling_verify on;