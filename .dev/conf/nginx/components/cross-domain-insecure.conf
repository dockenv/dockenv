# Cross domain AJAX requests

# **Security Warning**
# Do not use this without understanding the consequences.
# This will permit access from any other website.
#
add_header "Access-Control-Allow-Origin" "*";

# Instead of using this file, consider using a specific rule such as:
#
# Allow access based on [sub]domain:
#    add_header "Access-Control-Allow-Origin" "subdomain.example.com";
# OR
#    add_header "Access-Control-Allow-Origin" "*.example.com";

# Allow cross-origin access to the timing information for all resources.
#
# If a resource isn't served with a `Timing-Allow-Origin` header that would
# allow its timing information to be shared with the document, some of the
# attributes of the `PerformanceResourceTiming` object will be set to zero.
#
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Timing-Allow-Origin
# https://www.w3.org/TR/resource-timing/
# https://www.stevesouders.com/blog/2014/08/21/resource-timing-practical-tips/

add_header Timing-Allow-Origin "*";

# Set strict a Cross Origin Policy to mitigate information leakage.
#
# (1) Cross-Origin-Embedder-Policy prevents a document from loading any
#     cross-origin resources that donâ€™t explicitly grant the document
#     permission.
#     https://html.spec.whatwg.org/multipage/origin.html#coep
#     https://owasp.org/www-project-secure-headers/#cross-origin-embedder-policy
#     https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
#
# (2) Cross-Origin-Opener-Policy allows you to ensure a top-level document does
#     not share a browsing context group with cross-origin documents.
#     https://html.spec.whatwg.org/multipage/origin.html#cross-origin-opener-policies
#     https://owasp.org/www-project-secure-headers/#cross-origin-opener-policy
#     https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
#
# (3) Cross-Origin-Resource-Policy allows to define a policy that lets web
#     sites and applications opt in to protection against certain requests from
#     other origins, to mitigate speculative side-channel attacks.
#     https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header
#     https://owasp.org/www-project-secure-headers/#cross-origin-resource-policy
#     https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy
#     https://resourcepolicy.fyi/
#
# To check your Cross Origin Policy, you can use an online service, such as:
# https://securityheaders.com/
# https://observatory.mozilla.org/
#
# https://web.dev/coop-coep/
# https://web.dev/why-coop-coep/
# https://web.dev/cross-origin-isolation-guide/
# https://scotthelme.co.uk/coop-and-coep/

# (1)
# add_header Cross-Origin-Embedder-Policy $coep_policy always;

# (2)
# add_header Cross-Origin-Opener-Policy $coop_policy always;

# (3)
# add_header Cross-Origin-Resource-Policy $corp_policy always;

add_header 'Access-Control-Allow-Credentials' 'true';
add_header 'Access-Control-Allow-Methods' 'GET,POST,HEAD,OPTIONS,PUT,DELETE,UPDATE';
add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

if ($request_method = 'OPTIONS') {
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Access-Control-Allow-Origin#cors_and_caching
    add_header 'Vary' 'Origin' always;
    add_header 'Access-Control-Allow-Origin' $http_origin;
    add_header 'Access-Control-Max-Age' 1728000;
    add_header 'Content-Type' 'text/plain charset=UTF-8';
    add_header 'Content-Length' 0;
    return 204;
}