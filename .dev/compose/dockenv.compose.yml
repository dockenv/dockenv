services:

  laravel:
    image: ${DOCKER_REGISTRY}/php:${LARAVEL_PHP_VERSION}
    hostname: laravel
    container_name: laravel
    restart: always
    privileged: true
    expose:
      - 9000
    depends_on:
      - nginx
      - mysql84
      - redis
    ports:
      - ${PHP83_PORT}:9000
    volumes:
      - ../conf/php/${LARAVEL_PHP_VERSION}/php.ini:/etc/php${LARAVEL_PHP_VERSION}/php.ini
      - ../conf/php/${LARAVEL_PHP_VERSION}/php-fpm.d:/etc/php${LARAVEL_PHP_VERSION}/php-fpm.d
      - ../conf/php/${LARAVEL_PHP_VERSION}/php-fpm.conf:/etc/php${LARAVEL_PHP_VERSION}/php-fpm.conf
      - ../logs/php/${LARAVEL_PHP_VERSION}:/var/log/php${LARAVEL_PHP_VERSION}
      - ${WORKSPACES}:/data
    networks:
      - dockenv
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  nginx:
    image: ${DOCKER_REGISTRY}/nginx:latest
    hostname: nginx
    container_name: nginx
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    ports:
      - ${NGINX_PORT}:80
      - ${NGINX_SSL_PORT}:443
    volumes:
      - ../logs/nginx:/var/log/nginx
      - ../conf/nginx/conf.d:/etc/nginx/conf.d
      - ../conf/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../conf/nginx/rewrite:/etc/nginx/rewrite
      - ../conf/nginx/components:/etc/nginx/components
      - ${WORKSPACES}:/data
    networks:
      dockenv:
        ipv4_address: ${IP_NGINX}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  php56:
    image: ${DOCKER_REGISTRY}/php:56
    hostname: php56
    container_name: php56
    restart: always
    expose:
      - 9000
    ports:
      - ${PHP56_PORT}:9000
    volumes:
      - ../logs/php74:/var/log/php74
      - ${WORKSPACES}:/data
    networks:
      dockenv:
        ipv4_address: ${IP_PHP56}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  php74:
    image: ${DOCKER_REGISTRY}/php:74
    hostname: php74
    container_name: php74
    restart: always
    privileged: true
    expose:
      - 9000
    ports:
      - ${PHP74_PORT}:9000
    volumes:
      - ../logs/php74:/var/log/php74
      - ${WORKSPACES}:/data
    networks:
      dockenv:
        ipv4_address: ${IP_PHP74}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  php80:
    image: ${DOCKER_REGISTRY}/php:80
    hostname: php80
    container_name: php80
    restart: always
    privileged: true
    expose:
      - 9000
    ports:
      - ${PHP80_PORT}:9000
    volumes:
      - ../conf/php/80/php.ini:/etc/php80/php.ini
      - ../conf/php/80/php-fpm.d:/etc/php80/php-fpm.d
      - ../conf/php/80/php-fpm.conf:/etc/php80/php-fpm.conf
      - ../logs/php/80:/var/log/php80
      - ${WORKSPACES}:/data
    networks:
      dockenv:
        ipv4_address: ${IP_PHP80}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  php81:
    image: ${DOCKER_REGISTRY}/php:81
    hostname: php81
    container_name: php81
    restart: always
    privileged: true
    expose:
      - 9000
    ports:
      - ${PHP81_PORT}:9000
    volumes:
      - ../conf/php/81/php.ini:/etc/php81/php.ini
      - ../conf/php/81/php-fpm.d:/etc/php81/php-fpm.d
      - ../conf/php/81/php-fpm.conf:/etc/php81/php-fpm.conf
      - ../logs/php/81:/var/log/php81
      - ${WORKSPACES}:/data
    networks:
      dockenv:
        ipv4_address: ${IP_PHP81}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  php82:
    image: ${DOCKER_REGISTRY}/php:82
    hostname: php82
    container_name: php82
    restart: always
    privileged: true
    expose:
      - 9000
    ports:
      - ${PHP82_PORT}:9000
    volumes:
      - ../conf/php/82/php.ini:/etc/php82/php.ini
      - ../conf/php/82/php-fpm.d:/etc/php82/php-fpm.d
      - ../conf/php/82/php-fpm.conf:/etc/php82/php-fpm.conf
      - ../logs/php/82:/var/log/php82
      - ${WORKSPACES}:/data
    networks:
      dockenv:
        ipv4_address: ${IP_PHP82}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  php83:
    image: ${DOCKER_REGISTRY}/php:83
    hostname: php83
    container_name: php83
    restart: always
    privileged: true
    expose:
      - 9000
    ports:
      - ${PHP83_PORT}:9000
    volumes:
      - ../conf/php/83/php.ini:/etc/php83/php.ini
      - ../conf/php/83/php-fpm.d:/etc/php83/php-fpm.d
      - ../conf/php/83/php-fpm.conf:/etc/php83/php-fpm.conf
      - ../logs/php/83:/var/log/php83
      - ${WORKSPACES}:/data
    networks:
      dockenv:
        ipv4_address: ${IP_PHP83}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  php84:
    image: ${DOCKER_REGISTRY}/php:84
    hostname: php84
    container_name: php84
    restart: always
    privileged: true
    expose:
      - 9000
    ports:
      - ${PHP84_PORT}:9000
    volumes:
      - ../conf/php/84/php.ini:/etc/php84/php.ini
      - ../conf/php/84/php-fpm.d:/etc/php84/php-fpm.d
      - ../conf/php/84/php-fpm.conf:/etc/php84/php-fpm.conf
      - ../logs/php/84:/var/log/php84
      - ${WORKSPACES}:/data
    networks:
      dockenv:
        ipv4_address: ${IP_PHP84}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  mysql57:
    image: ${DOCKER_REGISTRY}/mysql:5.7
    hostname: mysql57
    container_name: mysql57
    restart: always
    expose:
      - 3306
    ports:
      - ${MYSQL57_PORT}:3306
    volumes:
      - ../conf/mysql57:/etc/mysql
      - ../data/mysql57:/var/lib/mysql
      - ../logs/mysql57:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_ROOT_PASSWORD=${MYSQL57_ROOT_PASSWORD}
      # - MYSQL_DATABASE=${MYSQL57_DATABASE}
      - MYSQL_USER=${MYSQL57_USER}
      - MYSQL_PASSWORD=${MYSQL57_PASSWORD}
    # Bug, will killed, out of memory
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    command: --skip-ssl
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MYSQL57}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  mysql80:
    image: ${DOCKER_REGISTRY}/mysql:8.0
    hostname: mysql80
    container_name: mysql80
    restart: always
    expose:
      - 3306
    ports:
      - ${MYSQL80_PORT}:3306
    volumes:
      # - ../conf/mysql80/my.cnf:/etc/my.cnf
      - ../data/mysql80:/var/lib/mysql
      - ../logs/mysql80:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_ROOT_PASSWORD=${MYSQL80_ROOT_PASSWORD}
      # - MYSQL_DATABASE=${MYSQL80_DATABASE}
      - MYSQL_USER=${MYSQL80_USER}
      - MYSQL_PASSWORD=${MYSQL80_PASSWORD}
    # Bug, will killed, out of memory
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MYSQL80}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  mysql84:
    image: ${DOCKER_REGISTRY}/mysql:8.4
    hostname: mysql84
    container_name: mysql84
    restart: always
    expose:
      - 3306
    ports:
      - ${MYSQL84_PORT}:3306
    volumes:
      # - ../conf/mysql84/my.cnf:/etc/my.cnf
      - ../data/mysql84:/var/lib/mysql
      - ../logs/mysql84:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_ROOT_PASSWORD=${MYSQL84_ROOT_PASSWORD}
      # - MYSQL_DATABASE=${MYSQL84_DATABASE}
      - MYSQL_USER=${MYSQL84_USER}
      - MYSQL_PASSWORD=${MYSQL84_PASSWORD}
    # Bug, will killed, out of memory
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MYSQL84}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  mysql93:
    image: ${DOCKER_REGISTRY}/mysql:9.3
    hostname: mysql93
    container_name: mysql93
    restart: always
    expose:
      - 3306
    ports:
      - ${MYSQL93_PORT}:3306
    volumes:
      # - ../conf/mysql93/my.cnf:/etc/my.cnf
      - ../data/mysql93:/var/lib/mysql
      - ../logs/mysql93:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_ROOT_PASSWORD=${MYSQL93_ROOT_PASSWORD}
      # - MYSQL_DATABASE=${MYSQL93_DATABASE}
      - MYSQL_USER=${MYSQL93_USER}
      - MYSQL_PASSWORD=${MYSQL93_PASSWORD}
    # Bug, will killed, out of memory
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MYSQL93}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  postgres16:
    image: ${DOCKER_REGISTRY}/postgres:16
    hostname: postgres16
    container_name: postgres16
    restart: always
    expose:
      - 5432
    ports:
      - ${POSTGRES16_PORT}:5432
    volumes:
      - ../data/postgres16:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      dockenv:
        ipv4_address: ${IP_POSTGRES16}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  postgres17:
    image: ${DOCKER_REGISTRY}/postgres:17
    hostname: postgres17
    container_name: postgres17
    restart: always
    expose:
      - 5432
    ports:
      - ${POSTGRES17_PORT}:5432
    volumes:
      - ../data/postgres17:/var/lib/postgresql/data
      - type: tmpfs
        target: /dev/shm
        tmpfs:
          size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      - TZ="Asia/Shanghai"
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # - POSTGRES_HOST_AUTH_METHOD=trust
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      dockenv:
        ipv4_address: ${IP_POSTGRES17}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  redis:
    image: ${DOCKER_REGISTRY}/redis:latest
    container_name: redis
    hostname: redis
    # 默认 Redis 用户, 没权限写入挂载的 Volume
    user: root
    restart: always
    expose:
      - 6379
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ../conf/redis:/etc/redis
      - ../data/redis:/data
      - ../logs/redis:/var/log/redis
    # 数据持久化
    command: redis-server /etc/redis/redis.conf
    networks:
      dockenv:
        ipv4_address: ${IP_REDIS}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  valkey:
    image: ${DOCKER_REGISTRY}/valkey:latest
    hostname: valkey
    container_name: valkey
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    command: valkey-server /etc/valkey/valkey.conf --save 60 1 --loglevel warning
    volumes:
      - ../conf/valkey/valkey.conf:/etc/valkey/valkey.conf
    networks:
      dockenv:
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  # https://www.meilisearch.com/docs/learn/configuration/instance_options
  # https://raw.githubusercontent.com/meilisearch/meilisearch/latest/config.toml
  meilisearch:
    image: ${DOCKER_REGISTRY}/meilisearch:latest
    hostname: meilisearch
    container_name: meilisearch
    restart: always
    expose:
      - 7700
    volumes:
      - ../data/meilisearch:/data
    environment:
      # - MEILI_HTTP_ADDR=${IP_MEILISEARCH}:${MEILISEARCH_PORT}
      # - CONFIG_FILE_PATH=path/to/config.toml
      - MEILI_DB_PATH=/data/meilisearch
      - MEILI_DUMP_DIR=/data/dumps/
      - MEILI_SNAPSHOT_DIR=/data/snapshot
      - MEILI_ENV=development # development OR production
      - MEILI_MASTER_KEY=${DEFAULT_PASSWD}
      - MEILI_HTTP_PAYLOAD_SIZE_LIMIT=1073741824 # Gb Mb 1G
      - MEILI_MAX_INDEXING_MEMORY=1073741824 # Gb Mb 1G
      - MEILI_LOG_LEVEL=INFO # OFF, ERROR, WARN, INFO, DEBUG, TRACE
      - MEILI_SCHEDULE_SNAPSHOT=3600
    ports:
      - ${MEILISEARCH_PORT}:7700
    networks:
      dockenv:
        ipv4_address: ${IP_MEILISEARCH}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  memcached:
    image: ${DOCKER_REGISTRY}/memcached:latest
    container_name: memcached
    hostname: memcached
    restart: always
    expose:
      - 11211
    ports:
      - ${MEMCACHED_PORT}:11211
    networks:
      dockenv:
        ipv4_address: ${IP_MEMCACHED}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  rabbitmq:
    image: ${DOCKER_REGISTRY}/rabbitmq:latest
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    expose:
      - 5672
      - 1883
      - 61613
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MQTT_PORT}:1883"
      - "${RABBITMQ_MQTT_WEB_PORT}:15692"
      - "${RABBITMQ_STOMP_PORT}:61613"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    environment:
      TZ: "${TIMEZONE}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_DEFAULT_VHOST}"
      RABBITMQ_NODE_IP_ADDRESS: "${IP_RMQ}"
    volumes:
      - ../data/rabbitmq:/var/lib/rabbitmq
      - ../logs/rabbitmq:/var/log/rabbitmq
    networks:
      dockenv:
        ipv4_address: ${IP_RMQ}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  dragonflydb:
    image: ${DOCKER_REGISTRY}/dragonflydb:latest
    hostname: dragonflydb
    container_name: dragonflydb
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    environment:
      - USER_UID=1000
      - USER_GID=1000
    ports:
      - "${DRAGONFLYDB_PORT}:6379"
    volumes:
      - ../data/dragonflydb:/data
    # For better performance, consider `host` mode instead `port` to avoid docker NAT.
    # `host` mode is NOT currently supported in Swarm Mode.
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode
    # network_mode: "host"
    networks:
      dockenv:
        ipv4_address: ${IP_DRAGONFLYDB}

  mariadb106:
    image: ${DOCKER_REGISTRY}/mariadb:10.6
    hostname: mariadb106
    container_name: mariadb106
    restart: always
    expose:
      - "3306"
    ports:
      - "${MARIADB106_PORT}:3306"
    volumes:
      - ../data/mariadb106:/var/lib/mysql
      - ../logs/mariadb106/:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MARIADB106}

  mariadb1011:
    image: ${DOCKER_REGISTRY}/mariadb:10.11
    hostname: mariadb1011
    container_name: mariadb1011
    restart: always
    expose:
      - "3306"
    ports:
      - "${MARIADB1011_PORT}:3306"
    volumes:
      - ../data/mariadb1011:/var/lib/mysql
      - ../logs/mariadb1011/:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MARIADB1011}

  mariadb116:
    image: ${DOCKER_REGISTRY}/mariadb:11.6
    hostname: mariadb116
    container_name: mariadb116
    restart: always
    expose:
      - "3306"
    ports:
      - "${MARIADB116_PORT}:3306"
    volumes:
      - ../data/mariadb116:/var/lib/mysql
      - ../logs/mariadb116/:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MARIADB116}

  mariadb117:
    image: ${DOCKER_REGISTRY}/mariadb:11.7
    hostname: mariadb117
    container_name: mariadb117
    restart: always
    expose:
      - "3306"
    ports:
      - "${MARIADB117_PORT}:3306"
    volumes:
      - ../data/mariadb117:/var/lib/mysql
      - ../logs/mariadb117/:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MARIADB117}

  mariadb118:
    image: ${DOCKER_REGISTRY}/mariadb:11.8
    hostname: mariadb118
    container_name: mariadb118
    restart: always
    expose:
      - "3306"
    ports:
      - "${MARIADB118_PORT}:3306"
    volumes:
      - ../data/mariadb118:/var/lib/mysql
      - ../logs/mariadb118/:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MARIADB118}

  mongo6:
    image: ${DOCKER_REGISTRY}/mongo:6.0
    hostname: mongo6
    container_name: mongo6
    restart: always
    expose:
      - 27017
    ports:
      - ${MONGO6_PORT}:27017
    volumes:
      - ../data/mongo6:/data/db
      - ../conf/mongo6:/data/configdb
      - ../logs/mongo6:/var/log/mongo
    environment:
      TZ: ${TIMEZONE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    # command: mongod --config /etc/mongod.conf
    networks:
      dockenv:
        ipv4_address: ${IP_MONGO6}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  mongo7:
    image: ${DOCKER_REGISTRY}/mongo:7.0
    hostname: mongo7
    container_name: mongo7
    restart: always
    expose:
      - 27017
    ports:
      - ${MONGO7_PORT}:27017
    volumes:
      - ../data/mongo7:/data/db
      - ../conf/mongo7:/data/configdb
      - ../logs/mongo7:/var/log/mongo
    environment:
      TZ: ${TIMEZONE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    # command: mongod --config /etc/mongod.conf
    networks:
      dockenv:
        ipv4_address: ${IP_MONGO7}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  mongo8:
    image: ${DOCKER_REGISTRY}/mongo:8.0
    hostname: mongo8
    container_name: mongo8
    restart: always
    expose:
      - 27017
    ports:
      - ${MONGO8_PORT}:27017
    volumes:
      - ../data/mongo8:/data/db
      - ../conf/mongo8:/data/configdb
      - ../logs/mongo8:/var/log/mongo
    environment:
      TZ: ${TIMEZONE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    # command: mongod --config /etc/mongod.conf
    networks:
      dockenv:
        ipv4_address: ${IP_MONGO8}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  portainer:
    image: portainer/portainer-ee:latest
    hostname: portainer
    container_name: portainer
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    ports:
      - 8000:8000
      - 9443:9443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../data/portainer:/data
    networks:
      dockenv:
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

networks:
  dockenv:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${DOCKER_SUBNET_IP}
          ip_range: ${DOCKER_SUBNET_RANGE}
          gateway: ${DOCKER_SUBNET_GATEWAY}
