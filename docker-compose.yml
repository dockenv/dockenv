services:
  nginx:
    image: ${DOCKER_REGISTRY}/nginx:latest
    hostname: nginx
    container_name: nginx
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    ports:
      - ${NGINX_PORT}:80
      - ${NGINX_SSL_PORT}:443
    volumes:
    - ./logs/nginx:/var/log/nginx
    - ./conf/nginx/conf.d:/etc/nginx/conf.d
    - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
    - ./conf/nginx/rewrite:/etc/nginx/rewrite
    - ~/Code:/data
    links:
      - php74:php74
      - php82:php82
    networks:
      dockenv:
        ipv4_address: ${IP_NGINX}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  php74:
    image: ${DOCKER_REGISTRY}/php:74
    hostname: php74
    container_name: php74
    restart: always
    expose:
      - 9000
    depends_on:
      - mongo
      - mysql57
      - mysql80
      - redis
      - memcached
      - meilisearch
      - minio
      - rabbitmq
    ports:
      - ${PHP74_PORT}:9000
    volumes:
      - ./logs/php74:/var/log/php-fpm
      - ~/Code:/data
    networks:
      - dockenv
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  php82:
    image: ${DOCKER_REGISTRY}/php:82
    hostname: php82
    container_name: php82
    restart: always
    expose:
      - 9000
    depends_on:
      - mongo
      - mysql57
      - mysql80
      - redis
      - memcached
      - meilisearch
      - minio
      - rabbitmq
    ports:
      - ${PHP82_PORT}:9000
    volumes:
      - ./logs/php82:/var/log/php-fpm
      - ~/Code:/data
    networks:
      - dockenv
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  mysql57:
    image: ${DOCKER_REGISTRY}/mysql:5.7
    hostname: mysql57
    container_name: mysql57
    restart: always
    expose:
      - 3306
    ports:
      - ${MYSQL57_PORT}:3306
    volumes:
      - ./data/mysql57:/var/lib/mysql
      - ./logs/mysql57:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_ROOT_PASSWORD=${MYSQL57_ROOT_PASSWORD}
      # - MYSQL_DATABASE=${MYSQL57_DATABASE}
      - MYSQL_USER=${MYSQL57_USER}
      - MYSQL_PASSWORD=${MYSQL57_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MYSQL57}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  mysql80:
    image: ${DOCKER_REGISTRY}/mysql:8.0
    hostname: mysql80
    container_name: mysql80
    restart: always
    expose:
      - 3306
    ports:
      - ${MYSQL80_PORT}:3306
    volumes:
      - ./data/mysql80:/var/lib/mysql
      - ./logs/mysql80:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_ROOT_PASSWORD=${MYSQL80_ROOT_PASSWORD}
      # - MYSQL_DATABASE=${MYSQL80_DATABASE}
      - MYSQL_USER=${MYSQL80_USER}
      - MYSQL_PASSWORD=${MYSQL80_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      dockenv:
        ipv4_address: ${IP_MYSQL80}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  mongo:
    image: ${DOCKER_REGISTRY}/mongo:latest
    hostname: mongo
    container_name: mongo
    restart: always
    expose:
      - 27017
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - ./data/mongo:/data/db
      - ./conf/mongo:/data/configdb
      - ./logs/mongo:/var/log/mongo
    environment:
      TZ: ${TIMEZONE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    # command: mongod --config /etc/mongod.conf
    networks:
      dockenv:
        ipv4_address: ${IP_MONGO}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  postgres:
    image: ${DOCKER_REGISTRY}/postgres:16
    hostname: postgres
    container_name: postgres
    restart: always
    expose:
      - 5432
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      dockenv:
        ipv4_address: ${IP_POSTGRES}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  redis:
    image: ${DOCKER_REGISTRY}/redis:latest
    container_name: redis
    hostname: redis
    # 默认 Redis 用户, 没权限写入挂载的 Volume
    user: root
    restart: always
    expose:
      - 6379
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./conf/redis:/etc/redis
      - ./data/redis:/data
      - ./logs/redis:/var/log/redis
    # 数据持久化
    command: redis-server /etc/redis/redis.conf
    networks:
      dockenv:
        ipv4_address: ${IP_REDIS}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  memcached:
    image: ${DOCKER_REGISTRY}/memcached:latest
    container_name: memcached
    hostname: memcached
    restart: always
    expose:
      - 11211
    ports:
      - ${MEMCACHED_PORT}:11211
    networks:
      dockenv:
        ipv4_address: ${IP_MEMCACHED}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  rabbitmq:
    image: ${DOCKER_REGISTRY}/rabbitmq:latest
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    expose:
      - 5672
      - 1883
      - 61613
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MQTT_PORT}:1883"
      - "${RABBITMQ_MQTT_WEB_PORT}:15692"
      - "${RABBITMQ_STOMP_PORT}:61613"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    environment:
      TZ: "${TIMEZONE}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_DEFAULT_VHOST}"
      RABBITMQ_NODE_IP_ADDRESS: "${IP_RMQ}"
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
      - ./logs/rabbitmq:/var/log/rabbitmq
    networks:
      dockenv:
        ipv4_address: ${IP_RMQ}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  # https://www.meilisearch.com/docs/learn/configuration/instance_options
  # https://raw.githubusercontent.com/meilisearch/meilisearch/latest/config.toml
  meilisearch:
    image: ${DOCKER_REGISTRY}/meilisearch:latest
    hostname: meilisearch
    container_name: meilisearch
    restart: always
    expose:
      - 7700
    volumes:
      - ./data/meilisearch:/data
    environment:
      # - MEILI_HTTP_ADDR=${IP_MEILISEARCH}:${MEILISEARCH_PORT}
      # - CONFIG_FILE_PATH=path/to/config.toml
      - MEILI_DB_PATH=/data/meilisearch
      # - MEILI_DUMP_DIR=dumps/
      - MEILI_MASTER_KEY=${DEFAULT_PASSWD}
      - MEILI_ENV=development # development OR production
      - MEILI_HTTP_PAYLOAD_SIZE_LIMIT=1073741824 # Gb Mb 1G
      - MEILI_MAX_INDEXING_MEMORY=1073741824 # Gb Mb 1G
      - MEILI_LOG_LEVEL=INFO # OFF, ERROR, WARN, INFO, DEBUG, TRACE
      - MEILI_SCHEDULE_SNAPSHOT=3600
      - MEILI_SNAPSHOT_DIR=/data/snapshot
    ports:
      - ${MEILISEARCH_PORT}:7700
    networks:
      dockenv:
        ipv4_address: ${IP_MEILISEARCH}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  elastic:
    image: ${DOCKER_REGISTRY}/elastic:latest
    hostname: elastic
    container_name: elastic
    restart: always
    expose:
      - 9300
    environment:
      - ELASTIC_PASSWORD=dockenv
      # 此配置会导致无法启动
      # - ENROLLMENT_TOKEN=dockenv
      - cluster.name=${NAME}
      - discovery.type=single-node
      # 默认禁用 elasticsearch https 和登陆账号密码 仅适用于 Docker 测试环境
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      # - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      # - script.painless.regex.enabled=true
      # - node.master=false
      # - node.data=true
      - TZ=${TIMEZONE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      # - elastic:/usr/share/elasticsearch/data
      - ./data/elastic:/data
      # - ${ELASTICSEARCH_CONF_FILE}:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "${ELASTIC_WEB_PORT}:9200"
      - "${ELASTIC_PORT}:9300"
    networks:
      dockenv:
        ipv4_address: ${IP_ELASTICSEARCH}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  # volumes /usr/share/logstash/config/
  logstash:
    image: ${DOCKER_REGISTRY}/logstash:latest
    hostname: logstash
    container_name: logstash
    restart: always
    expose:
      - 5044
    environment:
      - TZ=${TIMEZONE}
      - ELASTICSEARCH_HOSTS=["http://elastic:9200"]
    ports:
      - "${LOGSTASH_WEB_PORT}:9600"
      - "${LOGSTASH_PORT}:5044"
    depends_on:
      - elastic
    links:
      - elastic:elasticsearch
    networks:
      dockenv:
        ipv4_address: ${IP_LOGSTASH}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  kibana:
    image: ${DOCKER_REGISTRY}/kibana:latest
    hostname: kibana
    container_name: kibana
    restart: always
    expose:
      - 5601
    environment:
      - TZ=${TIMEZONE}
      - SERVER_NAME=kibana
      # - ELASTICSEARCH_HOSTS=["http://${ELASTICSEARCH_IP}:9200"]
      - ELASTICSEARCH_HOSTS=["http://elastic:9200"]
      - LS_JAVA_OPTS=-Xmx512m -Xms512m
    ports:
      - "${KIBANA_PORT}:5601"
    depends_on:
      - elastic
    links:
      - elastic:elastic
    networks:
      dockenv:
        ipv4_address: ${IP_KIBANA}
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

  # Object Storage Service(Compatible With Amazon S3 Protocol)
  # TODO Fix president Storage -v ./data/minio:/data
  minio:
    image: ${DOCKER_REGISTRY}/minio:latest
    hostname: minio
    container_name: minio
    restart: always
    expose:
      - 19000
      - 1921
    environment:
      - MINIO_ADDRESS=0.0.0.0:${MINIO_PORT} # minio port
      - MINIO_CONSOLE_ADDRESS=0.0.0.0:${MINIO_WEB_PORT} # minio console port
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    command: server /data --ftp="address=:${MINIO_FTP_PORT}" --ftp="passive-port-range=30000-40000"
    # Add Sftp Support
    # --sftp="address=:8022" --sftp="ssh-private-key=${HOME}/.ssh/id_rsa"
    ports:
      - ${MINIO_PORT}:${MINIO_PORT}
      - ${MINIO_WEB_PORT}:${MINIO_WEB_PORT}
      - ${MINIO_FTP_PORT}:${MINIO_FTP_PORT}
    volumes:
      - ./data/minio:/data
    networks:
      - dockenv
    dns:
      - ${DOCKER_DNS1}
      - ${DOCKER_DNS2}

networks:
  dockenv:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${DOCKER_SUBNET_IP}
          ip_range: ${DOCKER_SUBNET_RANGE}
          gateway: ${DOCKER_SUBNET_GATEWAY}